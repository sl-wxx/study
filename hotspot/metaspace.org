* 概述
1. Metaspaces are Arenas for the VM's metadata.
   They are allocated one per class loader object, and one for the null bootstrap class loader
2. Eventually for bootstrap loader we'll have a read-only section and read-write
   to write for DumpSharedSpaces and read for UseSharedSpaces
3. Metaspaces each have a  SpaceManager and allocations are done by the SpaceManager.  
   Allocations are done out of the current Metachunk.  When the current Metachunk is exhausted, 
   the SpaceManager gets a new one from the current VirtualSpace.  When the VirtualSpace is exhausted
   the SpaceManager gets a new one.  The SpaceManager also manages freelists of available Chunks.
4. Currently the space manager maintains the list virtual spaces and the list of chunks in use.  
   Its allocate() method returns a block for use as a quantum of metadata.

* 源码分析
1. Metaspace
   #+BEGIN_SRC c++
class Metaspace : public CHeapObj<mtClass> {

 public:
  enum MetadataType {
    ClassType,
    NonClassType,
    MetadataTypeCount
  };
  enum MetaspaceType {
    StandardMetaspaceType,
    BootMetaspaceType,
    ROMetaspaceType,
    ReadWriteMetaspaceType,
    AnonymousMetaspaceType,
    ReflectionMetaspaceType
  };

 private:
  // Aligned size of the metaspace.
  static size_t _compressed_class_space_size;

  static size_t _first_chunk_word_size;
  static size_t _first_class_chunk_word_size;

  static size_t _commit_alignment;
  static size_t _reserve_alignment;

  SpaceManager* _vsm;

  SpaceManager* _class_vsm;

  // Virtual Space lists for both classes and other metadata
  static VirtualSpaceList* _space_list;
  static VirtualSpaceList* _class_space_list;

  static ChunkManager* _chunk_manager_metadata;
  static ChunkManager* _chunk_manager_class;

  static const MetaspaceTracer* _tracer;

  class AllocRecord : public CHeapObj<mtClass> {
  public:
    AllocRecord(address ptr, MetaspaceObj::Type type, int byte_size)
      : _next(NULL), _ptr(ptr), _type(type), _byte_size(byte_size) {}
    AllocRecord *_next;
    address _ptr;
    MetaspaceObj::Type _type;
    int _byte_size;
  };

  AllocRecord * _alloc_record_head;
  AllocRecord * _alloc_record_tail;

 public:

  class AllocRecordClosure :  public StackObj {
  public:
    virtual void doit(address ptr, MetaspaceObj::Type type, int byte_size) = 0;
  };

  void iterate(AllocRecordClosure *closure);
};
   #+END_SRC

