* 启动流程
1. main函数位于jdk/src/share/bin/main.c
   1. 通过JLI_Launch调用解析命令行参数
   2. 查找并动态加载libjvm.so
   3. 调用pthread库的pthread_create执行JavaMain
   4. 然后主线程调用pthread_join等待JavaMain线程返回
2. JavaMain: Java程序执行入口
   1. 调用InitializeJVM


* 主要接口
1. JavaMainArgs:
   1. 封装了JavaMain执行所需参数, 包括argc, argv和几个主要的函数地址
   2. JNI_CreateJavaVM/JNI_GetCreatedJavaVM等
2. JNICALL: 是一个宏, 在linux下定义为空 (define JNICALL)
3. JNIEnv
   #+BEGIN_SRC c++
   #ifdef __cplusplus
       typedef JNIEnv_ JNIEnv;
   #else
       typedef const struct JNINativeInterface_ *JNIEnv;
   #endif

   struct JNINativeInterface_ {
       void *reserved0;
       void *reserved1;
       void *reserved2;

       void *reserved3;
       jint (JNICALL *GetVersion)(JNIEnv *env);

       jclass (JNICALL *DefineClass)
         (JNIEnv *env, const char *name, jobject loader, const jbyte *buf,
          jsize len);
       jclass (JNICALL *FindClass)
         (JNIEnv *env, const char *name);
            // ...........
            // ...........
   }

   /*
    ,* We use inlined functions for C++ so that programmers can write:
    ,*
    ,*    env->FindClass("java/lang/String")
    ,*
    ,* in C++ rather than:
    ,*
    ,*    (*env)->FindClass(env, "java/lang/String")
    ,*
    ,* in C.
    ,*/

    struct JNIEnv_ {
        const struct JNINativeInterface_ *functions;
        #ifdef __cplusplus
        
            jint GetVersion() {
                return functions->GetVersion(this);
            }
            jclass DefineClass(const char *name, jobject loader, const jbyte *buf,
                               jsize len) {
                return functions->DefineClass(this, name, loader, buf, len);
            }
            jclass FindClass(const char *name) {
                return functions->FindClass(this, name);
            }            
            // ...........
            // ...........
        #endif
    }
   #+END_SRC
4. JavaVM
   #+BEGIN_SRC c++
    #ifdef __cplusplus
        typedef JavaVM_ JavaVM;
    #else
        typedef const struct JNIInvokeInterface_ *JavaVM;
    #endif

    struct JavaVM_ {
        const struct JNIInvokeInterface_ *functions;
    #ifdef __cplusplus
    
        jint DestroyJavaVM() {
            return functions->DestroyJavaVM(this);
        }
        jint AttachCurrentThread(void **penv, void *args) {
            return functions->AttachCurrentThread(this, penv, args);
        }
        jint DetachCurrentThread() {
            return functions->DetachCurrentThread(this);
        }
    
        jint GetEnv(void **penv, jint version) {
            return functions->GetEnv(this, penv, version);
        }
        jint AttachCurrentThreadAsDaemon(void **penv, void *args) {
            return functions->AttachCurrentThreadAsDaemon(this, penv, args);
        }
    #endif
    };

    struct JNIInvokeInterface_ {
        void *reserved0;
        void *reserved1;
        void *reserved2;
    
        jint (JNICALL *DestroyJavaVM)(JavaVM *vm);
    
        jint (JNICALL *AttachCurrentThread)(JavaVM *vm, void **penv, void *args);
    
        jint (JNICALL *DetachCurrentThread)(JavaVM *vm);
    
        jint (JNICALL *GetEnv)(JavaVM *vm, void **penv, jint version);
    
        jint (JNICALL *AttachCurrentThreadAsDaemon)(JavaVM *vm, void **penv, void *args);
    };
   #+END_SRC
5. 
