* 调用层级
   #+begin_example
0  in InterpreterGenerator::generate_normal_entry of hotspot/src/cpu/x86/vm/templateInterpreter_x86_64.cpp:1403
1  in AbstractInterpreterGenerator::generate_method_entry of hotspot/src/cpu/x86/vm/templateInterpreter_x86_64.cpp:1660
2  in TemplateInterpreterGenerator::generate_all of hotspot/src/share/vm/interpreter/templateInterpreter.cpp:369
3  in InterpreterGenerator::InterpreterGenerator of hotspot/src/cpu/x86/vm/templateInterpreter_x86_64.cpp:1970
4  in TemplateInterpreter::initialize of hotspot/src/share/vm/interpreter/templateInterpreter.cpp:52
5  in interpreter_init of hotspot/src/share/vm/interpreter/interpreter.cpp:118
6  in init_globals of hotspot/src/share/vm/runtime/init.cpp:109
7  in Threads::create_vm of hotspot/src/share/vm/runtime/thread.cpp:3418
   #+end_example

* 起始状态
  | 栈             | 说明 | 寄存器          | 说明                    |
  |----------------+------+-----------------+-------------------------|
  | return address |      | rbx=Method*     | Method* 表示Java method |
  | param1         |      | r13 = sender sp |                         |
  | param2         |      |                 |                         |
  | ......         |      |                 |                         |

* 最终状态
  | 栈                | 说明                                                | 寄存器 | 说明 |
  |-------------------+-----------------------------------------------------+--------+------|
  | Monitor 相关      | 只对synchronize方法才有这部分                       |        |      |
  | 0                 | reserve word for pointer to expression stack bottom |        |      |
  | r13               | bcp: bytecode pointer. 0 for native frame           |        |      |
  | r14               | pointer to locals                                   |        |      |
  | cpCache           | Method*.constMethod.constantPool._cache             |        |      |
  | mdp               | Method*.methodData.data_offset                      |        |      |
  | rbx               | Method*                                             |        |      |
  | NULL_WORD         | last_sp                                             |        |      |
  | r13               | sender sp                                           |        |      |
  | old rbp           | the caller's rbp                                    |        |      |
  | return pc         | pushed by call                                      |        |      |
  | locals and params |                                                     |        |      |

* 代码说明
  1. 起始状态: rbx=Method*, r13=sender sp, 栈的结构如上表.
  2. locals包含函数局部变量和形参.形参在开始时已经位于栈上, 并紧邻return address.
     这里先将return address pop到rax, 然后在栈上为局部变量分配空间并初始化为0.
     最终的结果是局部变量和形参都位于栈上并相邻. 同时令r14=locals. 
  3. generate_fixed_frame(false) 
     建立了主要的栈结构.
  4. if(synchronized) { lock_method(); } 
     参见synchronize.org
  5. dispatch_next(vtos)
     参见dispatch_table.org

* 源代码
  这里省略了profile/verify/assert相关代码, 只保留了重要的逻辑部分.
  #+BEGIN_SRC c++
//
// Generic interpreted method entry to (asm) interpreter
//
address InterpreterGenerator::generate_normal_entry(bool synchronized) {

  // ebx: Method*
  // r13: sender sp
  address entry_point = __ pc();

  const Address constMethod(rbx, Method::const_offset());
  const Address access_flags(rbx, Method::access_flags_offset());
  const Address size_of_parameters(rdx,
                                   ConstMethod::size_of_parameters_offset());
  const Address size_of_locals(rdx, ConstMethod::size_of_locals_offset());


  // get parameter size (always needed)
  __ movptr(rdx, constMethod);
  __ load_unsigned_short(rcx, size_of_parameters);

  // rbx: Method*
  // rcx: size of parameters
  // r13: sender_sp (could differ from sp+wordSize if we were called via c2i )

  __ load_unsigned_short(rdx, size_of_locals); // get size of locals in words
  __ subl(rdx, rcx); // rdx = no. of additional locals

  // YYY
//   __ incrementl(rdx);
//   __ andl(rdx, -2);

  // see if we've got enough room on the stack for locals plus overhead.
  generate_stack_overflow_check();

  // get return address
  __ pop(rax);

  // compute beginning of parameters (r14)
  __ lea(r14, Address(rsp, rcx, Address::times_8, -wordSize));

  // rdx - # of additional locals
  // allocate space for locals
  // explicitly initialize locals
  {
    Label exit, loop;
    __ testl(rdx, rdx);
    __ jcc(Assembler::lessEqual, exit); // do nothing if rdx <= 0
    __ bind(loop);
    __ push((int) NULL_WORD); // initialize local variables
    __ decrementl(rdx); // until everything initialized
    __ jcc(Assembler::greater, loop);
    __ bind(exit);
  }

  // initialize fixed part of activation frame
  generate_fixed_frame(false);

  // check for synchronized methods
  // Must happen AFTER invocation_counter check and stack overflow check,
  // so method is not locked if overflows.
  if (synchronized) {
    // Allocate monitor and lock method
    lock_method();
  } else {
    // no synchronization necessary
  }

  // jvmti support
  __ notify_method_entry();

  __ dispatch_next(vtos);

  return entry_point;
}

// Generate a fixed interpreter frame. This is identical setup for
// interpreted methods and for native methods hence the shared code.
//
// Args:
//      rax: return address
//      rbx: Method*
//      r14: pointer to locals
//      r13: sender sp
//      rdx: cp cache
void TemplateInterpreterGenerator::generate_fixed_frame(bool native_call) {
  // initialize fixed part of activation frame
  __ push(rax);        // save return address
  __ enter();          // save old & set new rbp
  __ push(r13);        // set sender sp
  __ push((int)NULL_WORD); // leave last_sp as null
  __ movptr(r13, Address(rbx, Method::const_offset()));      // get ConstMethod*
  __ lea(r13, Address(r13, ConstMethod::codes_offset())); // get codebase
  __ push(rbx);        // save Method*
  if (ProfileInterpreter) {
    Label method_data_continue;
    __ movptr(rdx, Address(rbx, in_bytes(Method::method_data_offset())));
    __ testptr(rdx, rdx);
    __ jcc(Assembler::zero, method_data_continue);
    __ addptr(rdx, in_bytes(MethodData::data_offset()));
    __ bind(method_data_continue);
    __ push(rdx);      // set the mdp (method data pointer)
  } else {
    __ push(0);
  }

  __ movptr(rdx, Address(rbx, Method::const_offset()));
  __ movptr(rdx, Address(rdx, ConstMethod::constants_offset()));
  __ movptr(rdx, Address(rdx, ConstantPool::cache_offset_in_bytes()));
  __ push(rdx); // set constant pool cache
  __ push(r14); // set locals pointer
  if (native_call) {
    __ push(0); // no bcp
  } else {
    __ push(r13); // set bcp
  }
  __ push(0); // reserve word for pointer to expression stack bottom
  __ movptr(Address(rsp, 0), rsp); // set expression stack bottom
}

void InterpreterMacroAssembler::dispatch_next(TosState state, int step) {
  // load next bytecode (load before advancing r13 to prevent AGI)
  load_unsigned_byte(rbx, Address(r13, step));
  // advance r13
  increment(r13, step);
  dispatch_base(state, Interpreter::dispatch_table(state));
}

static address* dispatch_table(TosState state) { 
  return _active_table.table_for(state); 
}

void InterpreterMacroAssembler::dispatch_base(TosState state,
                                              address* table,
                                              bool verifyoop) {
  lea(rscratch1, ExternalAddress((address)table));
  jmp(Address(rscratch1, rbx, Address::times_8));
}
  #+END_SRC