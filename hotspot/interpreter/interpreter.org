* 初始化流程概述
interpreter的初始化代码位于Threads::create_vm() ----> init_globals()方法中.

1. bytecodes_init() 初始化bytecode table.
2. interpreter_init()
   1. TemplateInterpreter::initialize()
      1. AbstractInterpreter::initialize(): 
         重置相关计数器, 如BytecodeCounter/BytecodeHistogram/InvocationCounter
      2. TemplateTable::initialize()
         将bytecode和用于解释它的generator函数对应起来
      3. 初始化InterpreterGenerator
         #+BEGIN_SRC c++
_code = new StubQueue(new InterpreterCodeletInterface, code_size, NULL, "Interpreter");
InterpreterGenerator g(_code);         
         #+END_SRC
         1. AbstractInterpreterGenerator::generate_all()
            Interpreter::_slow_signature_handler = generate_slow_signature_handler();
         2. TemplateInterpreterGenerator::generate_all()
            #+BEGIN_SRC c++
_unimplemented_bytecode    = generate_error_exit("unimplemented bytecode");
_illegal_bytecode_sequence = generate_error_exit("illegal bytecode sequence - method not verified");            
for (int i = 0; i < Interpreter::number_of_return_entries; i++) {
  Interpreter::_return_entry[i] =
    EntryPoint(
      generate_return_entry_for(itos, i, index_size),
      generate_return_entry_for(itos, i, index_size),
      generate_return_entry_for(itos, i, index_size),
      generate_return_entry_for(atos, i, index_size),
      generate_return_entry_for(itos, i, index_size),
      generate_return_entry_for(ltos, i, index_size),
      generate_return_entry_for(ftos, i, index_size),
      generate_return_entry_for(dtos, i, index_size),
      generate_return_entry_for(vtos, i, index_size)
    );
}

for (int i = 0; i < Interpreter::number_of_return_addrs; i++) {
  TosState state = states[i];
  Interpreter::_invoke_return_entry[i] = generate_return_entry_for(state, invoke_length, sizeof(u2));
  Interpreter::_invokeinterface_return_entry[i] = generate_return_entry_for(state, invokeinterface_length, sizeof(u2));
  Interpreter::_invokedynamic_return_entry[i] = generate_return_entry_for(state, invokedynamic_length, sizeof(u4));
}

Interpreter::_earlyret_entry =
  EntryPoint(
    generate_earlyret_entry_for(btos),
    generate_earlyret_entry_for(ctos),
    generate_earlyret_entry_for(stos),
    generate_earlyret_entry_for(atos),
    generate_earlyret_entry_for(itos),
    generate_earlyret_entry_for(ltos),
    generate_earlyret_entry_for(ftos),
    generate_earlyret_entry_for(dtos),
    generate_earlyret_entry_for(vtos)
  );  

for (int i = 0; i < Interpreter::number_of_deopt_entries; i++) {
  Interpreter::_deopt_entry[i] =
    EntryPoint(
      generate_deopt_entry_for(itos, i),
      generate_deopt_entry_for(itos, i),
      generate_deopt_entry_for(itos, i),
      generate_deopt_entry_for(atos, i),
      generate_deopt_entry_for(itos, i),
      generate_deopt_entry_for(ltos, i),
      generate_deopt_entry_for(ftos, i),
      generate_deopt_entry_for(dtos, i),
      generate_deopt_entry_for(vtos, i)
    );
}

for (int i = 0; i < Interpreter::number_of_result_handlers; i++) {
  BasicType type = types[i];
  if (!is_generated[Interpreter::BasicType_as_index(type)]++) {
    Interpreter::_native_abi_to_tosca[Interpreter::BasicType_as_index(type)] = generate_result_handler_for(type);
  }
}

Interpreter::_continuation_entry =
  EntryPoint(
    generate_continuation_for(btos),
    generate_continuation_for(ctos),
    generate_continuation_for(stos),
    generate_continuation_for(atos),
    generate_continuation_for(itos),
    generate_continuation_for(ltos),
    generate_continuation_for(ftos),
    generate_continuation_for(dtos),
    generate_continuation_for(vtos)
  );

Interpreter::_safept_entry =
  EntryPoint(
    generate_safept_entry_for(btos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(ctos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(stos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(atos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(itos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(ltos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(ftos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(dtos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(vtos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint))
  );

generate_throw_exception();

method_entry();

set_entry_points_for_all_bytes();
set_safepoints_for_all_bytes();
            #+END_SRC
         3. InterpreterGenerator::generate_all()

