* 初始化流程概述
interpreter的初始化代码位于Threads::create_vm() ----> init_globals()方法中.

1. bytecodes_init() 初始化bytecode table.
2. interpreter_init()
   1. TemplateInterpreter::initialize()
      1. AbstractInterpreter::initialize(): 
         重置相关计数器, 如BytecodeCounter/BytecodeHistogram/InvocationCounter
      2. TemplateTable::initialize()
         将bytecode和用于解释它的generator函数对应起来
      3. 初始化InterpreterGenerator
         #+BEGIN_SRC c++
_code = new StubQueue(new InterpreterCodeletInterface, code_size, NULL, "Interpreter");
InterpreterGenerator g(_code);         
         #+END_SRC
         1. AbstractInterpreterGenerator::generate_all()
            Interpreter::_slow_signature_handler = generate_slow_signature_handler();
         2. TemplateInterpreterGenerator::generate_all()
            #+BEGIN_SRC c++
enum TosState {         // describes the tos cache contents
  btos = 0,             // byte, bool tos cached
  ctos = 1,             // char tos cached
  stos = 2,             // short tos cached
  itos = 3,             // int tos cached
  ltos = 4,             // long tos cached
  ftos = 5,             // float tos cached
  dtos = 6,             // double tos cached
  atos = 7,             // object cached
  vtos = 8,             // tos not cached
  number_of_states,
  ilgl                  // illegal state: should not occur
};

enum MoreConstants {
  number_of_return_entries  = number_of_states,        // number of return entry points
  number_of_deopt_entries   = number_of_states,        // number of deoptimization entry points
  number_of_return_addrs    = number_of_states         // number of return addresses
};

static address    _throw_ArrayIndexOutOfBoundsException_entry;
static address    _throw_ArrayStoreException_entry;
static address    _throw_ArithmeticException_entry;
static address    _throw_ClassCastException_entry;
static address    _throw_WrongMethodType_entry;
static address    _throw_NullPointerException_entry;
static address    _throw_exception_entry;

static address    _throw_StackOverflowError_entry;

// continuation address if an exception is not handled by current frame
static address    _remove_activation_entry;                   

#ifdef HOTSWAP
// continuation address when current frame is being popped
static address    _remove_activation_preserving_args_entry;   
#endif // HOTSWAP

#ifndef PRODUCT
  static EntryPoint _trace_code;
#endif // !PRODUCT

// entry points to return to from a call
static EntryPoint _return_entry[number_of_return_entries];    

// entry point to return early from a call
static EntryPoint _earlyret_entry;                            

// entry points to return to from a deoptimization
static EntryPoint _deopt_entry[number_of_deopt_entries];      

static EntryPoint _continuation_entry;
static EntryPoint _safept_entry;

// for invokestatic, invokespecial, invokevirtual return entries
static address _invoke_return_entry[number_of_return_addrs];    

// for invokeinterface return entries       
static address _invokeinterface_return_entry[number_of_return_addrs]; 

// for invokedynamic return entries
static address _invokedynamic_return_entry[number_of_return_addrs];    

// the active dispatch table (used by the interpreter for dispatch)
static DispatchTable _active_table;                           

// the normal dispatch table (used to set the active table in normal mode)
static DispatchTable _normal_table;                           

// the safepoint dispatch table (used to set the active table for safepoints)
static DispatchTable _safept_table;                           

// wide instructions only (vtos tosca always)
static address _wentry_point[DispatchTable::length];    



_unimplemented_bytecode    = generate_error_exit("unimplemented bytecode");
_illegal_bytecode_sequence = generate_error_exit("illegal bytecode sequence - method not verified");            
for (int i = 0; i < Interpreter::number_of_return_entries; i++) {
  Interpreter::_return_entry[i] =
    EntryPoint(
      generate_return_entry_for(itos, i, index_size),
      generate_return_entry_for(itos, i, index_size),
      generate_return_entry_for(itos, i, index_size),
      generate_return_entry_for(atos, i, index_size),
      generate_return_entry_for(itos, i, index_size),
      generate_return_entry_for(ltos, i, index_size),
      generate_return_entry_for(ftos, i, index_size),
      generate_return_entry_for(dtos, i, index_size),
      generate_return_entry_for(vtos, i, index_size)
    );
}

for (int i = 0; i < Interpreter::number_of_return_addrs; i++) {
  TosState state = states[i];
  Interpreter::_invoke_return_entry[i] = generate_return_entry_for(state, invoke_length, sizeof(u2));
  Interpreter::_invokeinterface_return_entry[i] = generate_return_entry_for(state, invokeinterface_length, sizeof(u2));
  Interpreter::_invokedynamic_return_entry[i] = generate_return_entry_for(state, invokedynamic_length, sizeof(u4));
}

Interpreter::_earlyret_entry =
  EntryPoint(
    generate_earlyret_entry_for(btos),
    generate_earlyret_entry_for(ctos),
    generate_earlyret_entry_for(stos),
    generate_earlyret_entry_for(atos),
    generate_earlyret_entry_for(itos),
    generate_earlyret_entry_for(ltos),
    generate_earlyret_entry_for(ftos),
    generate_earlyret_entry_for(dtos),
    generate_earlyret_entry_for(vtos)
  );  

for (int i = 0; i < Interpreter::number_of_deopt_entries; i++) {
  Interpreter::_deopt_entry[i] =
    EntryPoint(
      generate_deopt_entry_for(itos, i),
      generate_deopt_entry_for(itos, i),
      generate_deopt_entry_for(itos, i),
      generate_deopt_entry_for(atos, i),
      generate_deopt_entry_for(itos, i),
      generate_deopt_entry_for(ltos, i),
      generate_deopt_entry_for(ftos, i),
      generate_deopt_entry_for(dtos, i),
      generate_deopt_entry_for(vtos, i)
    );
}

for (int i = 0; i < Interpreter::number_of_result_handlers; i++) {
  BasicType type = types[i];
  if (!is_generated[Interpreter::BasicType_as_index(type)]++) {
    Interpreter::_native_abi_to_tosca[Interpreter::BasicType_as_index(type)] = generate_result_handler_for(type);
  }
}

Interpreter::_continuation_entry =
  EntryPoint(
    generate_continuation_for(btos),
    generate_continuation_for(ctos),
    generate_continuation_for(stos),
    generate_continuation_for(atos),
    generate_continuation_for(itos),
    generate_continuation_for(ltos),
    generate_continuation_for(ftos),
    generate_continuation_for(dtos),
    generate_continuation_for(vtos)
  );

Interpreter::_safept_entry =
  EntryPoint(
    generate_safept_entry_for(btos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(ctos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(stos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(atos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(itos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(ltos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(ftos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(dtos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),
    generate_safept_entry_for(vtos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint))
  );

generate_throw_exception();

// kind is 
Interpreter::_entry_table[Interpreter::kind] = method_entry(Interpreter::kind);

set_entry_points_for_all_bytes(); // initialize Interpreter::_normal_table/_wentry_point

set_safepoints_for_all_bytes(); // initialize Interpreter::_safept_table

_active_table = _normal_table;
            #+END_SRC
   2. register_stub
      #+BEGIN_SRC c++
Forte::register_stub(
    "Interpreter",
    AbstractInterpreter::code()->code_start(),
    AbstractInterpreter::code()->code_end()
);      
      #+END_SRC

