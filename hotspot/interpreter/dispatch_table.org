* 概述
1. DispatchTable记录了每个字节码对应的机器码.
2. 对于非跳转字节码, 机器码还包含跳转到下一字节码执行的指令.
   即: 如果当前字节码本身不包含跳转指令, 则跳转到下一条字节码执行.
   这样就完成了对"执行当前指令, eip++"的模拟.
3. 由于字节码经常需要维护操作数栈, dispatchTable对这一块做了统一处理.
   也就是把维护操作数栈的指令和字节码本身的功能指令进行解耦.
   为了提高效率, 操作数栈会尽可能的通过通用寄存器来模拟, 而避免直接的栈操作.
   #+begin_example
   例如: aload指令完成后, 应该向操作数栈push一个ref值.
   实际上该ref值并没有被push到操作数栈, 而是暂存在rax中.
   1. 如果紧接着的字节码需要消耗(pop)该ref值, 则它直接使用rax.
      这样就避免了2次栈操作(一次push, 一次pop)提高了效率.
   2. 如果紧接着的字节码不使用该ref值, 则在开始执行前push该ref值到栈上.
      这是因为接下来的字节码可能会用到rax, 如果不先把rax保存到栈上, 就会丢失ref值了.
   #+end_example
4. 需要push则tos_out != vtos, 如aload; 需要pop则tos_in != vtos, 如iaload.
   | 序号 | 前一条字节码 | 后一条字节码 | 操作 |
   |------+--------------+--------------+------|
   |    1 | 需要push     | 需要pop      | 无   |
   |    2 | 需要push     | 不需要pop    | push |
   |    3 | 不需要push   | 需要pop      | pop  |
   |    4 | 不需要push   | 不需要pop    | 无   |
5. address _table[number_of_states][length];
   1. length=255 对应字节码总数小于等于255.
   2. number_of_states 对应参数可能的状态 7种类型+vtos(表示没有)
* 实例分析
#+BEGIN_SRC java
public static void main(String[] args) {
    int array[] = new int[2];
    int x = array[1];
}

// javap -c Main.class
public static void main(java.lang.String[]);
    Code:
       0: iconst_2
       1: newarray       int
       3: astore_1
       4: aload_1
       5: iconst_1
       6: iaload
       7: istore_2
       8: return
#+END_SRC

如上, 我们只分析Code的3~6部分.
1. aload_1 -> iconst_1 符合表中第2条
2. iconst_1 -> iaload 符号表中第1条

#+BEGIN_SRC asm
aload_1:
    mov rax, ref_       // 这里简单的用ref_指代array

iconst_1:
    mov rax, 0x1

iaload:                 // iaload需要消费两个参数, rdx由栈上获取, rax是直接使用.
    pop rdx             // 注意这里的pop不是操作数栈维护指令, 而是iaload本身的功能指令.
    mov rax, rdx + rax * 4 + arrayOopDesc::base_offset_in_bytes(T_INT)


// 最终结果
array[1]:
    mov rax, ref_
    push rax            // 这里的push指令是操作数栈维护指令.
    mov rax, 0x1
    pop rdx
    mov rax, rdx + rax * 4 + arrayOopDesc::base_offset_in_bytes(T_INT)
#+END_SRC
* 源码
** 数据结构定义
#+BEGIN_SRC c++
// A little wrapper class to group tosca-specific entry points into a unit.
// (tosca = Top-Of-Stack CAche)
class EntryPoint VALUE_OBJ_CLASS_SPEC {
 private:
  address _entry[number_of_states];

 public:
  // Construction
  EntryPoint();
  EntryPoint(address bentry, address centry, address sentry, address aentry, address ientry, address lentry, address fentry, address dentry, address ventry);

  // Attributes
  address entry(TosState state) const;                // return target address for a given tosca state
  void    set_entry(TosState state, address entry);   // set    target address for a given tosca state
  void    print();

  // Comparison
  bool operator == (const EntryPoint& y);             // for debugging only
};

class DispatchTable VALUE_OBJ_CLASS_SPEC {
 public:
  enum { length = 1 << BitsPerByte };                 // an entry point for each byte value (also for undefined bytecodes)

 private:
  address _table[number_of_states][length];           // dispatch tables, indexed by tosca and bytecode

 public:
  // Attributes
  EntryPoint entry(int i) const;                      // return entry point for a given bytecode i
  void       set_entry(int i, EntryPoint& entry);     // set    entry point for a given bytecode i
  address*   table_for(TosState state)          { return _table[state]; }
  address*   table_for()                        { return table_for((TosState)0); }
  int        distance_from(address *table)      { return table - table_for(); }
  int        distance_from(TosState state)      { return distance_from(table_for(state)); }

  // Comparison
  bool operator == (DispatchTable& y);                // for debugging only
};
#+END_SRC

** dispatchTable初始化
  #+BEGIN_SRC c++
void TemplateInterpreterGenerator::set_entry_points(Bytecodes::Code code) {
  CodeletMark cm(_masm, Bytecodes::name(code), code);
  // initialize entry points
  assert(_unimplemented_bytecode    != NULL, "should have been generated before");
  assert(_illegal_bytecode_sequence != NULL, "should have been generated before");
  address bep = _illegal_bytecode_sequence;
  address cep = _illegal_bytecode_sequence;
  address sep = _illegal_bytecode_sequence;
  address aep = _illegal_bytecode_sequence;
  address iep = _illegal_bytecode_sequence;
  address lep = _illegal_bytecode_sequence;
  address fep = _illegal_bytecode_sequence;
  address dep = _illegal_bytecode_sequence;
  address vep = _unimplemented_bytecode;
  address wep = _unimplemented_bytecode;
  // code for short & wide version of bytecode
  if (Bytecodes::is_defined(code)) {
    Template* t = TemplateTable::template_for(code);
    assert(t->is_valid(), "just checking");
    set_short_entry_points(t, bep, cep, sep, aep, iep, lep, fep, dep, vep);
  }
  if (Bytecodes::wide_is_defined(code)) {
    Template* t = TemplateTable::template_for_wide(code);
    assert(t->is_valid(), "just checking");
    set_wide_entry_point(t, wep);
  }
  // set entry points
  EntryPoint entry(bep, cep, sep, aep, iep, lep, fep, dep, vep);
  Interpreter::_normal_table.set_entry(code, entry);
  Interpreter::_wentry_point[code] = wep;
}  

void TemplateInterpreterGenerator::set_short_entry_points(Template* t, address& bep, address& cep, address& sep, address& aep, address& iep, address& lep, address& fep, address& dep, address& vep) {
  assert(t->is_valid(), "template must exist");
  switch (t->tos_in()) {
    case btos:
    case ctos:
    case stos:
      ShouldNotReachHere();  // btos/ctos/stos should use itos.
      break;
    case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
    case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
    case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
    case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
    case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
    case vtos: set_vtos_entry_points(t, bep, cep, sep, aep, iep, lep, fep, dep, vep);     break;
    default  : ShouldNotReachHere();                                                 break;
  }
}

void TemplateInterpreterGenerator::generate_and_dispatch(Template* t, TosState tos_out) {
  if (PrintBytecodeHistogram)                                    histogram_bytecode(t);
  int step;
  if (!t->does_dispatch()) {
    step = t->is_wide() ? Bytecodes::wide_length_for(t->bytecode()) : Bytecodes::length_for(t->bytecode());
    if (tos_out == ilgl) tos_out = t->tos_out();
    // compute bytecode size
    assert(step > 0, "just checkin'");
    // setup stuff for dispatching next bytecode
    if (ProfileInterpreter && VerifyDataPointer
        && MethodData::bytecode_has_profile(t->bytecode())) {
      __ verify_method_data_pointer();
    }
    __ dispatch_prolog(tos_out, step);
  }
  // generate template
  t->generate(_masm);
  // advance
  if (t->does_dispatch()) {
qq

  } else {
    // dispatch to next bytecode
    __ dispatch_epilog(tos_out, step);
  }
}

// The following two routines provide a hook so that an implementation
// can schedule the dispatch in two parts.  amd64 does not do this.
void InterpreterMacroAssembler::dispatch_prolog(TosState state, int step) {
  // Nothing amd64 specific to be done here
}

void InterpreterMacroAssembler::dispatch_epilog(TosState state, int step) {
  dispatch_next(state, step);
}

void TemplateInterpreterGenerator::set_vtos_entry_points(Template* t,
                                                         address& bep,
                                                         address& cep,
                                                         address& sep,
                                                         address& aep,
                                                         address& iep,
                                                         address& lep,
                                                         address& fep,
                                                         address& dep,
                                                         address& vep) {
  assert(t->is_valid() && t->tos_in() == vtos, "illegal template");
  Label L;
  aep = __ pc();  __ push_ptr();  __ jmp(L);
  fep = __ pc();  __ push_f();    __ jmp(L);
  dep = __ pc();  __ push_d();    __ jmp(L);
  lep = __ pc();  __ push_l();    __ jmp(L);
  bep = cep = sep =
  iep = __ pc();  __ push_i();
  vep = __ pc();
  __ bind(L);
  generate_and_dispatch(t);
}

  #+END_SRC
** dispatch_next循环
#+BEGIN_SRC c++
void InterpreterMacroAssembler::dispatch_next(TosState state, int step) {
  // load next bytecode (load before advancing r13 to prevent AGI)
  load_unsigned_byte(rbx, Address(r13, step));
  // advance r13
  increment(r13, step);
  dispatch_base(state, Interpreter::dispatch_table(state));
}

static address* dispatch_table(TosState state) { 
  return _active_table.table_for(state); 
}

void InterpreterMacroAssembler::dispatch_base(TosState state,
                                              address* table,
                                              bool verifyoop) {
  lea(rscratch1, ExternalAddress((address)table));
  jmp(Address(rscratch1, rbx, Address::times_8));
}
#+END_SRC