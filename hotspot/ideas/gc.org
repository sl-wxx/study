* 概述
1. 目标
   1. gc有3个目标: 吞吐量, 响应时间和内存占用
   2. 通常更大的堆内存可以提高吞吐量, 但可能增大响应时间.
   3. 通常将最大和最小堆内存设为同一个值, 以关闭堆的自动伸展和收缩, 提高效率.
2. 方式
   1. 如何识别垃圾
      不能被gc root引用的极为垃圾. gc root通常是java栈和native栈加上永久带上的对象.
   2. 如何回收垃圾
      1. 标记-清扫
         这种方式的问题是会产生内存碎片
      2. 复制
         这种方式的问题是对象内存位置变化后, 需要修正所有引用它的位置.
3. 差异化管理--分代回收
   1. 大部分对象的存活时间都很短, 而另一些对象存活时间很长.
   2. 对象刚开始分配在新生代, 在多次新生代回收后, 幸存下来的对象升级到老年代.
   3. 新生代使用复制方式回收: 被引用位置较少且新生代回收率高, 需要复制的对象少.
   4. 老年代使用标记-清扫方式回收: 被引用位置较多且老年代回收率低, 需要复制的对象多.

hotspot 支持的gc算法有:  ParallelGC | UseParallelOldGC | ConcMarkSweepGC | ParNewGC | G1GC

