* 概述
并发就是从单线程变到多线程.
并发问题就是这个变化引起的, 它的本质就是多个线程之间的干涉.
线程安全就是要保持必要的干涉, 而提高性能则是尽可能减少不必要的干涉.

比如SynchronizeMap通过使用一把大锁, 把干涉最大化来保证线程安全, 
而ConcurrentHashMap则通过分桶位加锁, 减少一部分干涉, 以提高性能.
(相应的, ConcurrentHashMap在线程安全语义上弱于SynchronizedMap. 比如size方法)

* 模型
** 干涉点模型
并发的核心就是干涉, 这里给出一个精确描述干涉的模型:
1. 在不同线程间设立一组相关的干涉点.
   这一点在下面的内存模型中详述.
2. 可以同时存在多个干涉点组, 且不同组之间互不影响.
   比如ConcurrentHashMap就使用了多组干涉点, 而SynchronizeMap只用了一组干涉点.
** 实例: Java内存模型
Java内存模型是用happens-before来描述的, 本质就是干涉点模型.
参见memory_model.org.

* 应用
** 线程安全
*** 封装
*** Immutable Object
*** 使用线程安全的类

** 性能优化
性能优化的本质是减少干涉, 可以从数据和逻辑两个方面来设计.
*** 选用更低代价的干涉点
干涉点又分为多种类型, 不同类型干涉点代价不同.
偏向锁, 无锁算法, AtomLong等, CAS, volatile
*** 缩小/扩大干涉范围

*** 将一组干涉点变为多组干涉点
LinkedBlockingQueue, ConcurrentHashMap等.

* 硬件相关
** CPU bound
** 减少上下文切换
线程池: 既做listener又做executor
根据CPU/IO密集型设置合理的线程数
** 缓存一致性协议
** memory barrier