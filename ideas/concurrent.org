* 概述
并发其实都是从单线程变到多线程.
并发问题就是这个变化引起的, 它的本质就是多个线程之间的干涉.
线程安全就是要保持必要的干涉, 而提高性能则是尽可能减少不必要的干涉.

比如SynchronizeMap通过使用一把大锁, 把干涉最大化来保证线程安全, 
而ConcurrentHashMap则通过分桶位加锁, 减少一部分干涉, 以提高性能.
(相应的, ConcurrentHashMap在线程安全语义上弱于SynchronizedMap. 比如size方法)

* 如何精确描述线程间的干涉
精确描述干涉的方法是: 在不同线程间设立一组相关的干涉点.
干涉点必须成组使用.
可以同时存在多个干涉点组, 且不同组之间互不影响.
** 内存模型

* 常用编码模式
** 封装
** Immutable Object
** 使用线程安全的类

* 性能优化
性能优化的本质是减少干涉, 具体又可以分为两个方面: 逻辑和数据
** 选用更低代价的干涉点
干涉点又分为多种类型, 不同类型干涉点代价不同.
偏向锁, 无锁算法, AtomLong等, CAS, volatile
** 缩小/扩大干涉范围

** 将一组干涉点变为多组干涉点
LinkedBlockingQueue, ConcurrentHashMap等.

* 硬件相关
** CPU bound
** 减少上下文切换
线程池: 既做listener又做executor
根据CPU/IO密集型设置合理的线程数
** 缓存一致性协议
** memory barrier