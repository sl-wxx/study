1. 你没做过复杂的项目
   我确实没做过很复杂的项目, 但我几乎完全靠自己通读了hotspot的源码. 
   这个复杂度和操作系统应该是一个数量级的, 另外我也有通读过一个教学用的操作系统的代码.
   我认为解决复杂的问题最重要的是先抓住主干, 再去理清细节.
   另外合理的使用一些工具也可以提高效率, 比如流程图, 状态转换图和表格等.
   我在读源码的过程中, 也有进行总结和归纳. 如果您看过我写的读书笔记, 
   相信您会认可我理解复杂系统的能力.
2. 你的优势是什么
   我阅读过<intel developer manual>, 一个教学用操作系统源码, hotspot源码, paxos论文等.
   这些经历让我获得了扎实的计算机基础知识, 快速理解复杂系统的能力和良好的学习能力.
   同时我也写读书笔记, 这锻炼了我的表达能力, 并促使我思考如何更简洁更清晰的表达.
   我会思考技术产生的背景, 要解决的问题, 解决问题的方式从而理解其本质.

   另外我认为自己是一个好的团队合作者.
   我了解<罗伯特议事规则>, 懂得沟通之前先要整理问题列表. 
   开始沟通时, 考虑对方的知识背景并在此基础上和对方建立共同的上下文.
   沟通中, 以解释而不是说服的角度沟通.
   沟通完成后, 合理的做出决定(如果需要我做决定).

   具体执行时, 会尽可能的考虑到自己的方案对其他部分的影响, 在不确定时会向同事求助, 
   而绝不会只关注是否完成了自己的任务. 会把代码写得尽可能简单直接到一眼看过去就不可能有bug, 
   并进行认真的测试.(PS: 我的代码bug率明显低于同组人)

   同时也会有意识的写一些工具脚本或整理文档, 并共享给同事. 
   我也懂得尊重同事的时间, 不会拿自己没有认真思考过的问题浪费同事的时间.
3. 性能比较/优化等
   首先只有在大数据量或者小数据量但大量调用时, 谈性能才有意义.
   性能优化通常是拿通用性换性能, 所以优化前先要建立约束或者说优化适用的条件. 