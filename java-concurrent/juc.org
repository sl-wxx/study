* 思路
并发结构的源码分析可以分为2个部分: 
1. 算法
   这部分的重点是理清读写操作的过程，而不要纠结并发相关的部分。
   很多时候算法本身就是为并发设计的，要刻意忽视并发并不容易， 但还是要尽量做。
   否则并发和算法混成一团，分析起来就更困难了。
2. 并发
   这部分重点要分析读写和写写之间是怎么构成happens-before语义的。
   读写操作除了类本身的take/put操作，还要考虑由iterator引入的读写操作，如next, remove等
3. CAS
   当并发控制通过CAS实现时，看起来会尤其复杂。CAS常见的代码模式如下:
   1. 创建snapshot: 通常表现为用局部变量保存volatile变量值
   2. 根据该snapshot判断需要执行的CAS动作   
      注意这里必须执行CAS操作，而不能直接赋值(这里是指共享变量，不包括局部变量)。
      由于没有加锁，第一步创建的snapshot可能已经过时，根据该snapshot做出的判断自然也不成立，
      所以这里只能做尝试写(CAS), 而不能直接写。
   3. 如果CAS操作成功，则方法返回; 否则回到1，继续循环
   从上面的描述可以清晰的看出: CAS代码就是一个状态机.分析CAS代码思路如下:
   1. 当前状态是否符合操作预置条件
   2. 先看return语句
* 常见类简述
** CopyOnWriteArrayList/CopyOnWriteArraySet
1. 