#+OPTIONS: ^:nil
* 硬件中断
** 初始化

1. 8259A主片32-39号中断对应的中断例程初始化为hwint_master
2. 8259A从片40-47号中断对应的中断例程初始化为hwint_slave
3. hwint_master和slave的区别仅在于slave多了一条置主片EOI的指令

      #+BEGIN_SRC asm
%macro	hwint_master	1
	call	save
	in	al, INT_M_CTLMASK	; `.
	or	al, (1 << %1)		;  | 屏蔽当前中断
	out	INT_M_CTLMASK, al	; /
	mov	al, EOI			; `. 置EOI位
	out	INT_M_CTL, al		; /
	sti	; CPU在响应中断的过程中会自动关中断，这句之后就允许响应新的中断
	push	%1			; `.
	call	[irq_table + 4 * %1]	;  | 中断处理程序
	pop	ecx			; /
	cli
	in	al, INT_M_CTLMASK	; `.
	and	al, ~(1 << %1)		;  | 恢复接受当前中断
	out	INT_M_CTLMASK, al	; /
	ret
%endmacro

save:
    pushad          ; `.
    push    ds      ;  |
    push    es      ;  | 保存原寄存器值
    push    fs      ;  |
    push    gs      ; /

	;; 注意，从这里开始，一直到 `mov esp, StackTop'，中间坚决不能用 push/pop 指令，
	;; 因为当前 esp 指向 proc_table 里的某个位置，push 会破坏掉进程表，导致灾难性后果！

	mov	esi, edx	; 保存 edx，因为 edx 里保存了系统调用的参数
				;（没用栈，而是用了另一个寄存器 esi）
	mov	dx, ss
	mov	ds, dx
	mov	es, dx
	mov	fs, dx

	mov	edx, esi	; 恢复 edx

    mov     esi, esp                    ;esi = 进程表起始地址

    inc     dword [k_reenter]           ;k_reenter++;
    cmp     dword [k_reenter], 0        ;if(k_reenter ==0)
    jne     .1                          ;{
    mov     esp, StackTop               ;  mov esp, StackTop <--切换到内核栈
    push    restart                     ;  push restart
    jmp     [esi + RETADR - P_STACKBASE];  return;
.1:                                         ;} else { 已经在内核栈，不需要再切换
    push    restart_reenter             ;  push restart_reenter
    jmp     [esi + RETADR - P_STACKBASE];  return;
                                            ;}

restart:
	mov	esp, [p_proc_ready]
	lldt	[esp + P_LDT_SEL] 
	lea	eax, [esp + P_STACKTOP]
	mov	dword [tss + TSS3_S_SP0], eax
restart_reenter:
	dec	dword [0k_reenter]
	pop	gs
	pop	fs
	pop	es
	pop	ds
	popad
	add	esp, 4
	iretd
      #+END_SRC

** 代码分析

1. 初始化过程会将idt中的中断例程设置为 hwint_master/slave
2. 中断发生时,
   1. CPU暂存用户进程的ss和esp
   2. 从tss中读取ring0对应的ss0和esp0并切换到内核栈(tss的段选择子位于task register)
   3. 将暂存的ss,esp和用户进程的eflags,cs,eip依次压栈
   4. 开始执行中断例程
3. 由于tss中的esp0恰好指向PCB的栈帧末尾,2中的步骤恰好使得用户进程的ss,esp,eflags,cs,eip被保存到PCB中
   #+BEGIN_SRC c

// PCB结构的栈帧定义
typedef struct s_stackframe {	/* proc_ptr points here				↑ Low			*/
	u32	gs;		/* ┓						│			*/
	u32	fs;		/* ┃						│			*/
	u32	es;		/* ┃						│			*/
	u32	ds;		/* ┃						│			*/
	u32	edi;		/* ┃						│			*/
	u32	esi;		/* ┣ pushed by save()				│			*/
	u32	ebp;		/* ┃						│			*/
	u32	kernel_esp;	/* <- 'popad' will ignore it			│			*/
	u32	ebx;		/* ┃						↑栈从高地址往低地址增长*/		
	u32	edx;		/* ┃						│			*/
	u32	ecx;		/* ┃						│			*/
	u32	eax;		/* ┛						│			*/
	u32	retaddr;	/* return address for assembly code save()	│			*/
	u32	eip;		/*  ┓						│			*/
	u32	cs;		/*  ┃						│			*/
	u32	eflags;		/*  ┣ these are pushed by CPU during interrupt	│			*/
	u32	esp;		/*  ┃						│			*/
	u32	ss;		/*  ┛						┷High			*/
}STACK_FRAME;
   #+END_SRC
4. 中断例程首先调用save方法
      #+BEGIN_SRC asm
save:
    pushad          ; `.
    push    ds      ;  |
    push    es      ;  | 保存原寄存器值
    push    fs      ;  |
    push    gs      ; /

	;; 注意，从这里开始，一直到 `mov esp, StackTop'，中间坚决不能用 push/pop 指令，
	;; 因为当前 esp 指向 proc_table 里的某个位置，push 会破坏掉进程表，导致灾难性后果！

	mov	esi, edx	; 保存 edx，因为 edx 里保存了系统调用的参数
				;（没用栈，而是用了另一个寄存器 esi）
	mov	dx, ss
	mov	ds, dx
	mov	es, dx
	mov	fs, dx

	mov	edx, esi	; 恢复 edx

    mov     esi, esp                    ;esi = 进程表起始地址

    inc     dword [k_reenter]           ;k_reenter++;
    cmp     dword [k_reenter], 0        ;if(k_reenter ==0)
    jne     .1                          ;{
    mov     esp, StackTop               ;  mov esp, StackTop <--切换到内核栈
    push    restart                     ;  push restart
    jmp     [esi + RETADR - P_STACKBASE];  return;
.1:                                         ;} else { 已经在内核栈，不需要再切换
    push    restart_reenter             ;  push restart_reenter
    jmp     [esi + RETADR - P_STACKBASE];  return;
                                        ;}
      #+END_SRC
   1. call指令会将当前指令的下一条指令的地址放到栈上, 恰好对应PCB栈帧的retaddr
   2. save方法随后通过push指令将用户进程的通用寄存器保存到PCB中
   3. 设置段寄存器. 由于需要用到通用寄存器dx, 使用esi临时保存edx.
   4. 暂存esp到esi
   5. 根据k_reenter判断是否中断重入
      1. 非中断重入: 切换到内核栈, 并将返回地址restart_reenter放到栈上.
      2. 中断重入: 已经在ring0,不需要切换堆栈,将返回地址restart_reenter放到栈上
      3. 中断重入时,内核栈上形成类似方法调用的结构.
   6. 通过jmp指令返回. 目标地址是由1中的call指令保存到栈上的(PCB栈帧的retaddr).
5. 返回中断例程继续执行
   #+BEGIN_SRC asm
%macro	hwint_master	1
	call	save
	in	al, INT_M_CTLMASK	; `.
	or	al, (1 << %1)		;  | 屏蔽当前中断
	out	INT_M_CTLMASK, al	; /
	mov	al, EOI			; `. 置EOI位
	out	INT_M_CTL, al		; /
	sti	; CPU在响应中断的过程中会自动关中断，这句之后就允许响应新的中断
	push	%1			; `.
	call	[irq_table + 4 * %1]	;  | 中断处理程序
	pop	ecx			; /
	cli
	in	al, INT_M_CTLMASK	; `.
	and	al, ~(1 << %1)		;  | 恢复接受当前中断
	out	INT_M_CTLMASK, al	; /
	ret
%endmacro
   #+END_SRC
   1. 在执行实际的中断函数之前,先禁用当前中断,置EOI
   2. 恢复被CPU自动关闭的中断响应, 即执行实际的中断函数时,允许接收新的中断
      如果此时发生新的中断,则会进入中断重入逻辑.多个中断在内核栈上形成类似方法调用的结构,依次执行
   3. 实际调用中断处理函数
   4. 关闭中断响应, 即: 下面的代码不能在可能产生中断的情况下执行
   5. 恢复接收当前中断
   6. 执行ret. 目标地址是由save方法push到栈上的.
      中断重入时,返回restart_reenter处;非中断重入时,返回restart
6. 返回restart / restart_reenter处执行
   #+BEGIN_SRC asm
restart:
	mov	esp, [p_proc_ready]
	lldt	[esp + P_LDT_SEL] 
	lea	eax, [esp + P_STACKTOP]
	mov	dword [tss + TSS3_S_SP0], eax
restart_reenter:
	dec	dword [k_reenter]
	pop	gs
	pop	fs
	pop	es
	pop	ds
	popad
	add	esp, 4
	iretd   
   #+END_SRC
   1. 非中断重入时,将esp指向用户进程PCB,这样之后的pop恰好是从PCB恢复之前保存的寄存器
      再将tss的sp0指向PCB中栈帧的末尾,以保证下次中断发生时,用户进程的寄存器恰好保存在PCB中
   2. 中断重入时,直接通过pop指令恢复前一个中断的寄存器,执行前一个中断例程.
   3. iretd 指令会从当前堆栈上依次恢复eip,cs,eflags; 如果存在特权级变换同时恢复esp和ss
      恢复eflags会将if位置1, 重新接收中断

** 中断重入分析
1. 中断发生时,CPU会自动关闭中断响应. 所以只有sti和cli之间的代码: 即实际的中断处理函数可能会被中断
2. 实际的中断处理函数被中断时,新的中断处理例程进入中断重入逻辑.
3. 先是旧中断的eflags,cs,eip被压到内核栈上
4. 然后新中断例程的save方法会把旧中断的段寄存器和通用寄存器压到内核栈上
5. 最后新的中断例程开始执行自己的中断处理函数
6. 新中断例程的iretd指令会恢复eflags,重新接收中断.
7. 此时旧中断例程可能再次被中断,但不会被相同类型的中断打断(旧中断类型的中断被相关代码屏蔽)
8. 旧中断例程恢复执行

总体上, 多个中断在内核栈上形成了类似方法调用的结构,依次执行

** 时钟中断分析
#+BEGIN_SRC c
PUBLIC void clock_handler(int irq)
{
	if (++ticks >= MAX_TICKS)
		ticks = 0;

	if (p_proc_ready->ticks)
		p_proc_ready->ticks--;

	if (key_pressed)
		inform_int(TASK_TTY);

	if (k_reenter != 0) {
		return;
	}

	if (p_proc_ready->ticks > 0) {
		return;
	}

	schedule();
}

PUBLIC void schedule()
{
	struct proc*	p;
	int		greatest_ticks = 0;

	while (!greatest_ticks) {
		for (p = &FIRST_PROC; p <= &LAST_PROC; p++) {
			if (p->p_flags == 0) {
				if (p->ticks > greatest_ticks) {
					greatest_ticks = p->ticks;
					p_proc_ready = p;
				}
			}
		}

		if (!greatest_ticks)
			for (p = &FIRST_PROC; p <= &LAST_PROC; p++)
				if (p->p_flags == 0)
					p->ticks = p->priority;
	}
}
#+END_SRC

1. 当前用户进程时间片--
2. inform_int 和TTY相关, 参见TTY.org
3. 如果当前用户进程时间片用尽,切换进程(schedule)
4. schedule
   1. 选出ticks最大且状态为RUNNING的proc并赋给p_proc_ready,结合restart即可完成进程切换
   2. 如果所有进程的时间片都已经用尽,重置各进程的时间片

* 软中断与系统调用
系统调用是通过软中断实现的, 即int指令. 
** 初始化
1. 在idt中将中断号0x90和sys_call建立关联
2. 初始化sys_call_table: sys_call_table[NR_SYS_CALL] = {sys_printx, sys_sendrec}
** 系统调用接口
   #+BEGIN_SRC asm
; ====================================================================================
;                  sendrec(int function, int src_dest, MESSAGE* msg);
; ====================================================================================
; Never call sendrec() directly, call send_recv() instead.
sendrec:
	push	ebx		; .
	push	ecx		;  > 12 bytes
	push	edx		; /

	mov	eax, _NR_sendrec
	mov	ebx, [esp + 12 +  4]	; function
	mov	ecx, [esp + 12 +  8]	; src_dest
	mov	edx, [esp + 12 + 12]	; msg
	int	INT_VECTOR_SYS_CALL

	pop	edx
	pop	ecx
	pop	ebx

	ret

; ====================================================================================
;                          void printx(char* s);
; ====================================================================================
printx:
	push	edx		; 4 bytes

	mov	eax, _NR_printx
	mov	edx, [esp + 4 + 4]	; s
	int	INT_VECTOR_SYS_CALL

	pop	edx

	ret
   #+END_SRC
1. eax传递系统调用号, edx传递参数
2. 通过int指令调用0x90对应的中断例程sys_call
** 系统调用实现
#+BEGIN_SRC asm
sys_call:
    call    save

    sti
	push	esi

	push	dword [p_proc_ready]
	push	edx
	push	ecx
	push	ebx
    call    [sys_call_table + eax * 4]
	add	esp, 4 * 4

	pop	esi
    mov     [esi + EAXREG - P_STACKBASE], eax
    cli

    ret
#+END_SRC
1. 先调用save方法保存用户进程的寄存器并切换到内核栈
2. 将参数p_proc_ready,edx,ecx和ebx依次压栈,并调用[sys_call_table + eax * 4].
3. p_proc_ready表示调用系统调用的用户进程.
4. 按照默认的函数调用惯例,返回值大小在1-4字节时,通过eax返回;在5-8字节时, 通过eax+ebx返回
5. 参数出栈,并将保存在eax中的返回值赋给用户进程的PCB中的eax 
   这样在iretd执行完之后,通过从PCB中恢复eax即可得到系统调用的返回值
6. 返回restart处执行