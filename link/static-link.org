#+OPTIONS: ^:nil
* 静态链接
1. 静态链接说明
   1. 静态链接会生成一个完全独立的可执行文件.
   2. 该可执行文件在装载时可以使用全部的进程空间,而不会受到其他限制.
   3. 所以在链接时(而不是运行时)就可以分配好符号加载后的虚拟地址
2. 空间与地址分配
   1. ld程序首先读取所有.o文件的段表,并将不同.o文件的相同段合并
   2. 由于各个符号在自己段内的相对位置是固定的,所以合并后符号地址已经确定
3. 链接时重定位
   1. 可重定位文件(.o)文件中引用的符号地址都是临时地址,还需要将其修订为正确的地址
   2. 每个需要进行重定位的段,都会对应一个重定位表. 重定位表的每一项都对应了一个重定位入口
   3. 根据重定位表项找到需要修订的位置和该位置引用的符号, 并按重定位表项指定的方式修订符号引用的地址
* 装载
1. 链接过程不仅会把不同.o文件的相同段合并, 还会使权限相同的段相邻.
   1. 可读可执行的段放在一起, 如代码段
   2. 可读可写的段放在一起, 如数据段和bss段
   3. 只读的段放在一起, 如只读数据段
2. 权限相同的相邻段被归为一个Segment,可以通过 readelf --program-header 查看.
3. 由于静态链接生成的可执行文件不依赖其他库, 只要将各个Segment加载到其虚拟地址指定的位置
4. 最后将控制权交给文件头中指定的可执行文件入口
* 实例分析
** 用到的C源码
#+BEGIN_SRC c
// a.c
extern int shared;
void swap(int* a, int* b);

int main() {
    int a = 100;
    swap(&a, &shared);
}

// b.c
int shared = 1;

void swap(int* a, int* b) {
    *a ^= *b ^= *a ^= *b;
}
#+END_SRC

** 可重定位文件a.o格式
以可重定位文件a.o为例分析目标文件格式.
1. 文件头 (readelf --file-header SectionMapping.elf)
   #+CAPTION: ELF文件头主要字段
   | 字段名                            | 说明                                             |
   |-----------------------------------+--------------------------------------------------|
   | Magic                             | 魔数                                             |
   | Class                             | ELF64/ELF32                                      |
   | Data                              | big endian/little endian                         |
   | Machine                           | SPARC/Intel x86/Intel 80860等                    |
   | Entry point address               | 程序开始执行的地址. 可重定位文件(.o)一般为0      |
   | Start of program headers          | 装载视图下的段表开始                             |
   | Start of section headers          | 链接视图下的段表开始                             |
   | Size of this header               | ELF文件头本身大小                                |
   | Size of program headers           | 装载视图下的段表大小                             |
   | Number of program headers         | 装载视图下的段表数量                             |
   | Size of section headers           | 链接视图下的段表大小                             |
   | Number of section headers         | 链接视图下的段表数量                             |
   | Section header string table index | 段名字符串段在段表中的下标(用于读取段名)     |

2. 段表 (readelf --section-header a.o)
   #+begin_example
   Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .text             PROGBITS         0000000000000000  00000040
       0000000000000027  0000000000000000  AX       0     0     1
  [ 2] .rela.text        RELA             0000000000000000  000001f8
       0000000000000030  0000000000000018   I      10     1     8
  [ 3] .data             PROGBITS         0000000000000000  00000067
       0000000000000000  0000000000000000  WA       0     0     1
  [ 4] .bss              NOBITS           0000000000000000  00000067
       0000000000000000  0000000000000000  WA       0     0     1
  [ 5] .comment          PROGBITS         0000000000000000  00000067
       0000000000000035  0000000000000001  MS       0     0     1
  [ 6] .note.GNU-stack   PROGBITS         0000000000000000  0000009c
       0000000000000000  0000000000000000           0     0     1
  [ 7] .eh_frame         PROGBITS         0000000000000000  000000a0
       0000000000000038  0000000000000000   A       0     0     8
  [ 8] .rela.eh_frame    RELA             0000000000000000  00000228
       0000000000000018  0000000000000018   I      10     7     8
  [ 9] .shstrtab         STRTAB           0000000000000000  00000240
       0000000000000059  0000000000000000           0     0     1
  [10] .symtab           SYMTAB           0000000000000000  000000d8
       0000000000000108  0000000000000018          11     8     8
  [11] .strtab           STRTAB           0000000000000000  000001e0
       0000000000000016  0000000000000000           0     0     1
   #+end_example

   1. section描述符结构
     #+CAPTION: Section段描述符结构
     | 字段名    | 说明                                                   |
     |-----------+--------------------------------------------------------|
     | Name      | 段名. 段名保存在字符串表.shstrtab中, 通过索引引用      |
     | Type      | 段类型. PROGBITS/SYMTAB等                              |
     | Address   | 段虚拟地址. 如果该段可以被加载,Address为其加载后的地址 |
     | Offset    | 如果该段存在于文件中,表示该段在文件中的偏移            |
     | Size      | 段长度. 为0说明该段不存在于文件中.                     |
     | EntSize   | 如果段保存固定大小的项(如符号表) 表示固定大小项的长度  |
     | Flags     | WRITE(可写)/ALLOC(需要分配空间)/EXEC(可执行)           |
     | Link/Info | 段类型不同含义不同                                     |
     | Align     | 段地址对齐要求                                         |

   2. section描述符字段说明
      1. 段虚拟地址
         1. 对可重定位文件(.o) 该值为0,表示待定
         2. 对共享库和可执行文件, 该值表示装载时,段被加载到的虚拟地址
         3. 只有经过链接(ld), 该值才不为0
      2. 常见段类型说明
         | 段类型   | 说明                         |
         |----------+------------------------------|
         | PROGBITS | 数据段和代码段都属于这种类型 |
         | SYMTAB   | 符号表                       |
         | STRTAB   | 字符串表                     |
         | RELA     | 重定位表                     |
         | REL      | 包含重定位信息               |
         | DYNAMIC  | 动态链接信息                 |
         | DNYSYM   | 动态链接符号表               |
      3. 段链接信息sh_link, sh_info
         | 段类型        | link                               | info                               |
         | DYNAMIC       | 该段所使用的字符串表在段表中的下标 | 0                                  |
         | REL/RELA      | 该段所使用的符号表在段表中的下标   | 该重定位表所作用的段在段表中的下标 |
         | SYMTAB/DYNSYM | 操作系统相关                       | 操作系统相关                       |

3. 主要段说明
   1. 字符串表, 包括.strtab和.shstrtab
      1. 字符串表将字符串连续存放以\0分割, 其他段可以通过记录某个字符串在表中的偏移来引用它
      2. .shstrtab用于记录段名, .strtab用于记录普通符号名
   2. .eh_frame和.rela.eh_frame是异常处理相关的段
   3. .bss主要存放未初始化的全局变量和局部静态变量
   4. .data段主要存放初始化的全局静态变量和局部静态变量
   5. .symtab 符号表. 
  | 序号 |         段内偏移 | 绑定信息 |    | 符号所属段     |         符号大小 |                 |
  |------+------------------+----------+----+----------------+------------------+-----------------|
  |    1 | 0000000000000000 | l        | df | ABS*           | 0000000000000000 | a.c             |
  |    2 | 0000000000000000 | l        | d  | text           | 0000000000000000 | .text           |
  |    3 | 0000000000000000 | l        | d  | data           | 0000000000000000 | .data           |
  |    4 | 0000000000000000 | l        | d  | bss            | 0000000000000000 | .bss            |
  |    5 | 0000000000000000 | l        | d  | note.GNU-stack | 0000000000000000 | .note.GNU-stack |
  |    6 | 0000000000000000 | l        | d  | eh_frame       | 0000000000000000 | .eh_frame       |
  |    7 | 0000000000000000 | l        | d  | comment        | 0000000000000000 | .comment        |
  |    8 | 0000000000000000 | g        | F  | text           | 0000000000000027 | main            |
  |    9 | 0000000000000000 |          |    | UND*           | 0000000000000000 | shared          |
  |   10 | 0000000000000000 |          |    | UND*           | 0000000000000000 | swap            |
      1. 符号表记录了定义在本目标文件中和引用的外部符号
      2. 对定义在本目标文件中的符号,符号表记录了该符号所在的段和段内偏移
      3. 重定位时用到的符号地址即来源于符号表
   4. .rela.text 代码段重定位表 (readelf --relocs a.o)
      #+begin_example
      Relocation section '.rela.text' at offset 0x1f8 contains 2 entries:
      Offset          Info           Type           Sym. Value        Sym. Name + Addend
      000000000014  00090000000a R_X86_64_32       0000000000000000   shared + 0
      00000000001c  000a00000002 R_X86_64_PC32     0000000000000000   swap - 4
      #+end_example
      1. 重定位表记录了重定位入口信息
      2. Offset表示需要进行重定位的位置相对于其所在段的段内偏移.
         重定位表的段表描述符section-header.info记录了重定位位置位于哪个段(此处是.text段)
      3. Info的高24位表示重定位入口的符号在符号表中的下标
         重定位表的段表描述符section-header.link记录了该重定位表使用哪个符号表
      4. Type 由Info的低8位获得, 表示重定位入口的类型 (Info的24/8分开存疑,但整体结构应该没有问题)
   5. .text
      #+BEGIN_SRC asm
      0000000000000000 <main>:
          0:   55                      push   %rbp               ;; 为函数调用保存ebp
          1:   48 89 e5                mov    %rsp,%rbp          ;; 为函数调用建立新的栈
          4:   48 83 ec 10             sub    $0x10,%rsp         ;; 在栈上开辟空间
          8:   c7 45 fc 64 00 00 00    movl   $0x64,-0x4(%rbp)   ;; 将变量a的值(100)放到新栈上
          f:   48 8d 45 fc             lea    -0x4(%rbp),%rax    ;; 获取变量a的地址(指针)
          13:   be 00 00 00 00          mov    $0x0,%esi         ;; 传参: shared指针, 参数值用0替代
          18:   48 89 c7                mov    %rax,%rdi         ;; 传参: a指针
          1b:   e8 00 00 00 00          callq  20 <main+0x20>    ;; 调用swap函数, 函数地址用0替代
          20:   b8 00 00 00 00          mov    $0x0,%eax         ;; 返回值为0
          25:   c9                      leaveq                   ;; 参数出栈
          26:   c3                      retq                     ;; 返回
      #+END_SRC
      1. 引用的外部符号shared和swap变量都是用0暂时替代, 在完成链接后会修改为实际地址.
      2. 对照6中的重定位表,可以看出Offset 14和1c 恰好对应代码段中shared和swap的段内偏移
         Info 0009和000a 恰好对应 符号表中shared和swap的下标
** 可重定位文件b.o
1. 总体格式与a.o相同
2. 由于b.c没有引用外部变量和函数, 所以b.o没有重定位段(忽略.rela.eh_frame)
3. b.o的符号表保含shared和swap的相关信息, 如下:
   #+begin_example
    0000000000000000 l    df *ABS*  0000000000000000 b.c
	0000000000000000 l    d  .text  0000000000000000 .text
	0000000000000000 l    d  .data  0000000000000000 .data
	0000000000000000 l    d  .bss   0000000000000000 .bss
	0000000000000000 l    d  .note.GNU-stack        0000000000000000 .note.GNU-stack
	0000000000000000 l    d  .eh_frame      0000000000000000 .eh_frame
	0000000000000000 l    d  .comment       0000000000000000 .comment
	0000000000000000 g     O .data  0000000000000004 shared
	0000000000000000 g     F .text  000000000000004b swap
   #+end_example

** 静态链接生成的可执行程序ab
1. 可执行文件的格式与可重定位文件基本相同
2. section headers
   #+begin_example
   Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .text             PROGBITS         00000000004000e8  000000e8
       0000000000000072  0000000000000000  AX       0     0     1
  [ 2] .eh_frame         PROGBITS         0000000000400160  00000160
       0000000000000058  0000000000000000   A       0     0     8
  [ 3] .data             PROGBITS         00000000006001b8  000001b8
       0000000000000004  0000000000000000  WA       0     0     4
  [ 4] .comment          PROGBITS         0000000000000000  000001bc
       0000000000000034  0000000000000001  MS       0     0     1
  [ 5] .shstrtab         STRTAB           0000000000000000  0000035a
       000000000000003a  0000000000000000           0     0     1
  [ 6] .symtab           SYMTAB           0000000000000000  000001f0
       0000000000000138  0000000000000018           7     7     8
  [ 7] .strtab           STRTAB           0000000000000000  00000328
       0000000000000032  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)
   #+end_example
   对比a.o的section-headers可以看出, Address项已经分配了相应的值
3. .text
   #+BEGIN_SRC asm
00000000004000e8 <main>:
  4000e8:       55                      push   %rbp
  4000e9:       48 89 e5                mov    %rsp,%rbp
  4000ec:       48 83 ec 10             sub    $0x10,%rsp
  4000f0:       c7 45 fc 64 00 00 00    movl   $0x64,-0x4(%rbp)
  4000f7:       48 8d 45 fc             lea    -0x4(%rbp),%rax
  4000fb:       be b8 01 60 00          mov    $0x6001b8,%esi  ;; shared地址已修正
  400100:       48 89 c7                mov    %rax,%rdi
  400103:       e8 07 00 00 00          callq  40010f <swap>   ;; swap地址已修正
  400108:       b8 00 00 00 00          mov    $0x0,%eax
  40010d:       c9                      leaveq 
  40010e:       c3                      retq   

000000000040010f <swap>:
  40010f:       55                      push   %rbp
  400110:       48 89 e5                mov    %rsp,%rbp
  400113:       48 89 7d f8             mov    %rdi,-0x8(%rbp)
  400117:       48 89 75 f0             mov    %rsi,-0x10(%rbp)
  40011b:       48 8b 45 f8             mov    -0x8(%rbp),%rax
  40011f:       8b 10                   mov    (%rax),%edx
  400121:       48 8b 45 f0             mov    -0x10(%rbp),%rax
  400125:       8b 00                   mov    (%rax),%eax
  400127:       31 c2                   xor    %eax,%edx
  400129:       48 8b 45 f8             mov    -0x8(%rbp),%rax
  40012d:       89 10                   mov    %edx,(%rax)
  40012f:       48 8b 45 f8             mov    -0x8(%rbp),%rax
  400133:       8b 10                   mov    (%rax),%edx
  400135:       48 8b 45 f0             mov    -0x10(%rbp),%rax
  400139:       8b 00                   mov    (%rax),%eax
  40013b:       31 c2                   xor    %eax,%edx
  40013d:       48 8b 45 f0             mov    -0x10(%rbp),%rax
  400141:       89 10                   mov    %edx,(%rax)
  400143:       48 8b 45 f0             mov    -0x10(%rbp),%rax
  400147:       8b 10                   mov    (%rax),%edx
  400149:       48 8b 45 f8             mov    -0x8(%rbp),%rax
  40014d:       8b 00                   mov    (%rax),%eax
  40014f:       31 c2                   xor    %eax,%edx
  400151:       48 8b 45 f8             mov    -0x8(%rbp),%rax
  400155:       89 10                   mov    %edx,(%rax)
  400157:       90                      nop
  400158:       5d                      pop    %rbp
  400159:       c3                      retq   
   #+END_SRC
   对比a.o的.text段可以看出, shared和swap的地址已经修正.
